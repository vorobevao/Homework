package com.example.shop;

import java.sql.*;
import java.util.Properties;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public class App {
    private Connection connection;

    public static void main(String[] args) {
        App app = new App();
        try {
            app.run();
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void run() throws Exception {
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PostgreSQL Shop...");
        connectToDatabase();
        checkAndCreateTables();
        demonstrateCRUDOperations();
        executeTestQueriesFromFile();
        closeConnection();
    }

    private void connectToDatabase() throws Exception {
        try {
            Class.forName("org.postgresql.Driver");
            System.out.println("‚úÖ –î—Ä–∞–π–≤–µ—Ä PostgreSQL –∑–∞–≥—Ä—É–∂–µ–Ω");
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("–î—Ä–∞–π–≤–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω", e);
        }

        Properties props = new Properties();
        try (InputStream input = getClass().getClassLoader().getResourceAsStream("application.properties")) {
            if (input == null) {
                throw new RuntimeException("–ù–µ –Ω–∞–π–¥–µ–Ω application.properties");
            }
            props.load(input);
        }

        String url = props.getProperty("db.url");
        String user = props.getProperty("db.username");
        String password = props.getProperty("db.password");

        System.out.println("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: " + url);
        connection = DriverManager.getConnection(url, user, password);
        connection.setAutoCommit(false);
        System.out.println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }

    private void checkAndCreateTables() throws SQLException {
        if (!tableExists("product")) {
            System.out.println("‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ schema.sql –≤—Ä—É—á–Ω—É—é:");
            System.out.println("docker exec my-postgres psql -U postgres -d shop -f /tmp/schema.sql");
            throw new SQLException("–¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ schema.sql —Å–Ω–∞—á–∞–ª–∞.");
        }
        System.out.println("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
    }

    private boolean tableExists(String tableName) throws SQLException {
        String sql = "SELECT EXISTS (SELECT FROM information_schema.tables " +
                "WHERE table_schema = 'public' AND table_name = ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, tableName);
            ResultSet rs = stmt.executeQuery();
            return rs.next() && rs.getBoolean(1);
        }
    }

    private void demonstrateCRUDOperations() throws SQLException {
        try {
            System.out.println("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CRUD –û–ü–ï–†–ê–¶–ò–ô ===");

            readProducts();
            readCustomers();
            insertNewProduct();
            insertNewCustomer();
            updateProductPrice();
            deleteTestData();

            connection.commit();
            System.out.println("\nüéâ –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");

        } catch (SQLException e) {
            connection.rollback();
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ CRUD –æ–ø–µ—Ä–∞—Ü–∏—è—Ö: " + e.getMessage());
            throw e;
        }
    }

    private void readProducts() throws SQLException {
        String sql = "SELECT id, description, price, quantity, category FROM product ORDER BY id LIMIT 5";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("\nüì¶ –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤:");
            printFormattedTable(rs);
        }
    }

    private void readCustomers() throws SQLException {
        String sql = "SELECT id, first_name, last_name, email FROM customer ORDER BY id LIMIT 5";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.println("\nüë• –ü–µ—Ä–≤—ã–µ 5 –∫–ª–∏–µ–Ω—Ç–æ–≤:");
            printFormattedTable(rs);
        }
    }

    private void insertNewProduct() throws SQLException {
        String sql = "INSERT INTO product (description, price, quantity, category) VALUES (?, ?, ?, ?)";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            String uniqueDescription = "–¢–æ–≤–∞—Ä_" + System.currentTimeMillis();
            stmt.setString(1, uniqueDescription);
            stmt.setDouble(2, 199.99);
            stmt.setInt(3, 10);
            stmt.setString(4, "–¢–µ—Å—Ç");

            stmt.executeUpdate();
            System.out.println("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: " + uniqueDescription);
        }
    }

    private void insertNewCustomer() throws SQLException {
        String sql = "INSERT INTO customer (first_name, last_name, phone, email) VALUES (?, ?, ?, ?)";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, "–ú–∞—Ä–∏—è");
            stmt.setString(2, "–ü–µ—Ç—Ä–æ–≤–∞");
            stmt.setString(3, "+79165555555");

            String uniqueEmail = "maria" + System.currentTimeMillis() + "@test.ru";
            stmt.setString(4, uniqueEmail);

            stmt.executeUpdate();
            System.out.println("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: " + uniqueEmail);
        }
    }

    private void updateProductPrice() throws SQLException {
        String sql = "UPDATE product SET price = price * 1.1 WHERE id = 1";

        try (Statement stmt = connection.createStatement()) {
            int affectedRows = stmt.executeUpdate(sql);
            if (affectedRows > 0) {
                System.out.println("‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ ID=1 —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 10%");
            } else {
                System.out.println("‚ö†Ô∏è  –¢–æ–≤–∞—Ä —Å ID=1 –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
            }
        }
    }

    private void deleteTestData() throws SQLException {
        String sql = "DELETE FROM customer WHERE email LIKE '%test.ru'";

        try (Statement stmt = connection.createStatement()) {
            int affectedRows = stmt.executeUpdate(sql);
            if (affectedRows > 0) {
                System.out.println("‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: " + affectedRows);
            } else {
                System.out.println("‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
            }
        }
    }

    private void executeTestQueriesFromFile() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ó–ê–ü–†–û–°–û–í –ò–ó –§–ê–ô–õ–ê ===");
        System.out.println("=".repeat(60));

        try {
            String filePath = "sql/test-queries.sql";

            if (!Files.exists(Paths.get(filePath))) {
                System.out.println("‚ùå –§–∞–π–ª test-queries.sql –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: " + filePath);
                return;
            }

            String content = new String(Files.readAllBytes(Paths.get(filePath)), StandardCharsets.UTF_8);
            System.out.println("‚úÖ –§–∞–π–ª test-queries.sql –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ");

            executeAllQueriesWithDetails(content);

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ test-queries.sql: " + e.getMessage());
            try {
                connection.rollback();
            } catch (SQLException rollbackEx) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + rollbackEx.getMessage());
            }
        }
    }

    private void executeAllQueriesWithDetails(String content) throws SQLException {
        String[] queries = content.split(";");
        int queryNumber = 0;

        for (String query : queries) {
            query = query.trim();

            if (query.isEmpty() || query.startsWith("--")) {
                continue;
            }

            queryNumber++;

            String queryType = getQueryType(query);
            String queryName = extractQueryName(query);

            System.out.println("\n" + "‚îÄ".repeat(60));
            System.out.printf("üîπ –ó–ê–ü–†–û–° #%d [%s]: %s%n", queryNumber, queryType, queryName);
            System.out.println("‚îÄ".repeat(60));

            try (Statement stmt = connection.createStatement()) {
                long startTime = System.currentTimeMillis();
                boolean hasResultSet = stmt.execute(query);
                long endTime = System.currentTimeMillis();

                if (hasResultSet) {
                    ResultSet rs = stmt.getResultSet();
                    printFormattedTable(rs);
                } else {
                    int affectedRows = stmt.getUpdateCount();

                    if (affectedRows > 0) {
                        System.out.printf("‚úÖ –£–°–ü–ï–•: –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ %d —Å—Ç—Ä–æ–∫%n", affectedRows);
                    } else {
                        System.out.println("‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª —Å—Ç—Ä–æ–∫–∏");
                    }
                }

                System.out.printf("‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %d –º—Å%n", endTime - startTime);

            } catch (SQLException e) {
                System.err.println("‚ùå –û–®–ò–ë–ö–ê: " + e.getMessage());
            }
        }

        connection.commit();

        System.out.println("\n" + "=".repeat(60));
        System.out.println("üéâ –í–°–ï –¢–ï–°–¢–û–í–´–ï –ó–ê–ü–†–û–°–´ –í–´–ü–û–õ–ù–ï–ù–´!");
        System.out.println("=".repeat(60));
    }

    private String getQueryType(String query) {
        String upperQuery = query.toUpperCase().trim();
        if (upperQuery.startsWith("SELECT")) return "SELECT";
        if (upperQuery.startsWith("UPDATE")) return "UPDATE";
        if (upperQuery.startsWith("DELETE")) return "DELETE";
        if (upperQuery.startsWith("INSERT")) return "INSERT";
        return "OTHER";
    }

    private String extractQueryName(String query) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö SELECT –∑–∞–ø—Ä–æ—Å–æ–≤
        if (query.contains("'") && query.contains("info")) {
            int start = query.indexOf("'") + 1;
            int end = query.indexOf("'", start);
            if (end > start) {
                return query.substring(start, end);
            }
        }

        // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–µ–∑–∞–µ–º
        if (query.length() > 50) {
            return query.substring(0, 47) + "...";
        }
        return query;
    }

    /**
     * –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
     */
    private void printFormattedTable(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        List<String[]> rows = new ArrayList<>();
        String[] headers = new String[columnCount];
        int[] maxWidths = new int[columnCount];

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for (int i = 1; i <= columnCount; i++) {
            headers[i-1] = metaData.getColumnName(i);
            maxWidths[i-1] = headers[i-1].length();
        }

        // –î–∞–Ω–Ω—ã–µ
        int rowCount = 0;
        while (rs.next() && rowCount < 20) { // –û–≥—Ä–∞–Ω–∏—á–∏–º 20 —Å—Ç—Ä–æ–∫–∞–º–∏
            String[] row = new String[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                String value = rs.getString(i);
                if (value == null) value = "NULL";
                row[i-1] = value;
                maxWidths[i-1] = Math.max(maxWidths[i-1], value.length());
            }
            rows.add(row);
            rowCount++;
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏
        for (int i = 0; i < columnCount; i++) {
            maxWidths[i] = Math.min(maxWidths[i], 30); // –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤
            maxWidths[i] = Math.max(maxWidths[i], 8);  // –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤
        }

        // –°—Ç—Ä–æ–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        StringBuilder separator = new StringBuilder("+");
        for (int width : maxWidths) {
            separator.append("-".repeat(width + 2)).append("+");
        }

        // –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        System.out.println(separator);
        StringBuilder headerRow = new StringBuilder("|");
        for (int i = 0; i < columnCount; i++) {
            headerRow.append(" ").append(padCenter(headers[i], maxWidths[i])).append(" |");
        }
        System.out.println(headerRow);
        System.out.println(separator);

        // –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        if (rows.isEmpty()) {
            // –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            StringBuilder emptyRow = new StringBuilder("|");
            for (int i = 0; i < columnCount; i++) {
                emptyRow.append(" ").append(padCenter("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", maxWidths[i])).append(" |");
            }
            System.out.println(emptyRow);
        } else {
            // –î–∞–Ω–Ω—ã–µ
            for (String[] row : rows) {
                StringBuilder dataRow = new StringBuilder("|");
                for (int i = 0; i < columnCount; i++) {
                    String value = row[i];
                    if (value.length() > maxWidths[i]) {
                        value = value.substring(0, maxWidths[i] - 3) + "...";
                    }
                    dataRow.append(" ").append(padRight(value, maxWidths[i])).append(" |");
                }
                System.out.println(dataRow);
            }
        }

        System.out.println(separator);
        System.out.println("üìä –ü–æ–∫–∞–∑–∞–Ω–æ —Å—Ç—Ä–æ–∫: " + rows.size());
    }

    /**
     * –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
     */
    private String padCenter(String text, int length) {
        if (text.length() >= length) {
            return text.substring(0, length);
        }

        int padding = length - text.length();
        int leftPadding = padding / 2;
        int rightPadding = padding - leftPadding;

        return " ".repeat(leftPadding) + text + " ".repeat(rightPadding);
    }

    /**
     * –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
     */
    private String padRight(String text, int length) {
        if (text.length() >= length) {
            return text.substring(0, length);
        }

        return text + " ".repeat(length - text.length());
    }

    private void closeConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                System.out.println("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ");
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + e.getMessage());
        }
    }
}